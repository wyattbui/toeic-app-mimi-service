// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  name String?

  // TOEIC related fields
  totalScore     Int? @default(0)
  listeningScore Int? @default(0)
  readingScore   Int? @default(0)
  level          String? // Beginner, Intermediate, Advanced
  targetScore    Int?

  testResults TestResult[]
  testSets    TestSet[]
  @@map("users")
}

// Test Set Management - Bộ đề thi
model TestSet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  partId Int
  part   Part @relation(fields: [partId], references: [id])

  title       String
  description String?
  
  // Test configuration
  questionCount Int @default(20) // Số câu hỏi trong bộ đề
  timeLimit     Int @default(60) // Thời gian làm bài (phút)
  difficulty    String? // easy, medium, hard
  
  // Status tracking
  status        String @default("created") // created, in_progress, completed, abandoned
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Results
  totalScore     Int? @default(0)
  correctAnswers Int? @default(0)
  wrongAnswers   Int? @default(0)
  
  // Questions in this test set
  questions TestSetQuestion[]
  answers   TestSetAnswer[]

  @@map("test_sets")
}

// Questions included in a test set
model TestSetQuestion {
  id Int @id @default(autoincrement())
  
  testSetId  Int
  testSet    TestSet @relation(fields: [testSetId], references: [id], onDelete: Cascade)
  
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  
  orderIndex Int // Thứ tự câu hỏi trong bộ đề

  @@unique([testSetId, questionId])
  @@map("test_set_questions")
}

// User answers for test set questions
model TestSetAnswer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  testSetId  Int
  testSet    TestSet @relation(fields: [testSetId], references: [id], onDelete: Cascade)
  
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  
  selectedOption String? // A, B, C, D hoặc null nếu chưa trả lời
  isCorrect      Boolean?
  timeSpent      Int? // Thời gian làm câu này (giây)

  @@unique([testSetId, questionId])
  @@map("test_set_answers")
}

// TOEIC Test Structure
model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalScore     Int
  listeningScore Int
  readingScore   Int
  duration       Int // in minutes
  testType       String // Full, Part1-7, Practice
  
  answers UserAnswer[]

  @@map("test_results")
}

// TOEIC Parts (1-7)
model Part {
  id          Int    @id @default(autoincrement())
  partNumber  Int    @unique // 1-7
  name        String // "Photographs", "Question-Response", etc.
  description String?
  skillType   String // "Listening" or "Reading"
  
  questions Question[]
  testSets  TestSet[]

  @@map("parts")
}

// Questions for each part
model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partId Int
  part   Part @relation(fields: [partId], references: [id], onDelete: Cascade)

  questionText  String   @db.Text
  questionType  String   // "single", "multiple", "passage"
  difficulty    String   // "easy", "medium", "hard"
  explanation   String?  @db.Text
  
  // Media files
  audioUrl      String?  // For listening parts
  imageUrl      String?  // For part 1 (photographs)
  
  // For reading passages (Parts 6-7)
  passageText   String?  @db.Text
  passageTitle  String?

  options        Option[]
  userAnswers    UserAnswer[]
  testSetQuestions TestSetQuestion[]
  testSetAnswers   TestSetAnswer[]

  @@map("questions")
}

// Answer options (A, B, C, D)
model Option {
  id         Int    @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  optionLetter String // "A", "B", "C", "D"
  optionText   String @db.Text
  isCorrect    Boolean @default(false)

  @@map("options")
}

// User's answers
model UserAnswer {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())

  testResultId Int?
  testResult   TestResult? @relation(fields: [testResultId], references: [id], onDelete: Cascade)

  questionId   Int
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  selectedOption String  // "A", "B", "C", "D"
  isCorrect      Boolean @default(false)
  timeSpent      Int?    // in seconds

  @@map("user_answers")
}
